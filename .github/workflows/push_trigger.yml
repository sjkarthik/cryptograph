name: Maven Package upon a push 

on:
  push:
    branches:
      - master
      - 1.*
      - develop
  
jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        ref: ${{ github.ref }}
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
    - name: Setup branch and env
      run: |
        # Strip git ref prefix from version
        echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
        echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
        
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}  
    

    - name: Build with Maven
      run: |
        mvn -B package -s $GITHUB_WORKSPACE/settings.xml -Dgpg.skip -DskipTests --file pom.xml
    
    - name: Ready the springboot artifacts
      run: find -name '*.jar' -executable -type f  -exec zip release.zip {} +

    - name: Upload the springboot jars 
      uses: actions/upload-artifact@v1
      with:
        name: release
        path: ./release.zip
  docker-cryptograph:
    needs: build

    runs-on: ubuntu-latest
    env:
      NAMESPACE: sjkarthik
      SERVICE_NAME: cryptograph1
      SERVICE_LOCATION: cryptograph1

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./

      - name: Setup branch name
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: /pom.xml 
          xpath: /*[local-name()="project"]/*[local-name()="version"] 
      
      - name: Unzip and extract the cryptograph
        run: unzip -uj "release.zip" "target/*" -d "target"
      
      - name: Build image
        run: |
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u sjkarthik --password Sairam@123
        
      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
